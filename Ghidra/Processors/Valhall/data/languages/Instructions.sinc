
define endian=little;
define alignment=8;

define space ram type=ram_space size=8 default;
define space register type=register_space size=4;
# What should size be, 2 or 4?

define token opword (64)
       src1         = (0,7)
       src2         = (8,15)
       src3         = (16,23)
       src4         = (24,31)

       src1r        = (0,5)
       src1t        = (6,7)
       src2r        = (8,13)
       src2d        = (14,15)
       src3r        = (16,21)
       src3d        = (22,23)
       src4r        = (24,29)
       src4d        = (30,31)

       D1           = (40,45)
       DM           = (46,47)

       second2      = (16,19)

       ofs          = (8,23) signed
       constant     = (8,39)
       sr_count     = (33,35)
       load_lane    = (36,38)
       unsigned_skip = (39,39)
       op           = (48,56)
       imm_mode     = (57,58)
       action       = (59,61)
       do_action    = (62,62)
;

# TODO: Also push uniforms?

define register offset=0x00 size=4 [
       r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15
       r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31
       r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47
       r48 r49 r50 r51 r52 r53 r54 r55 r56 r57 r58 r59 r60 r61 r62 r63
];

attach variables [ src1r src2r src3r src4r D1 ] [
       r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15
       r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31
       r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47
       r48 r49 r50 r51 r52 r53 r54 r55 r56 r57 r58 r59 r60 r61 r62 r63
];

# TODO: Different source modes:: how does aarch64 handle XZR?

S1: src1r is src1t=0 & src1r { export src1r; }
S1: src1r^"`" is src1t=1 & src1r { export src1r; }

#    tmp:4 = src1r; src1r = 0xdeadbeef; export tmp;

macro Store(reg, mask, val) {
      maskv = (((mask & 1) << 8) - 1) + (((mask & 2) << 15) - 1) + (((mask & 4) << 22) - 1) + (((mask & 8) << 29) - 1);

      reg = (val & maskv) | (reg & ~maskv);
}

:MOV.i32 D1, S1 is op=0x91 & second2=0x0 & D1 & DM & S1 {
         Store(D1, DM, S1);
}
