
define endian=little;
define alignment=8;

define space ram type=ram_space size=8 default;
define space register type=register_space size=4;

define token opword (64)

        src1 = (0,7)
        src1r = (0,5)
        src1u = (0,5)
        src1i = (0,4)
        src1ts = (0,2)
        src1id = (0,4)
        src1t = (6,7)

        src2 = (8,15)
        src2r = (8,13)
        src2u = (8,13)
        src2i = (8,12)
        src2ts = (8,10)
        src2id = (8,12)
        src2t = (14,15)

        src3 = (16,23)
        src3r = (16,21)
        src3u = (16,21)
        src3i = (16,20)
        src3ts = (16,18)
        src3id = (16,20)
        src3t = (22,23)

        src4 = (24,31)
        src4r = (24,29)
        src4u = (24,29)
        src4i = (24,28)
        src4ts = (24,26)
        src4id = (24,28)
        src4t = (30,31)

        absneg1      = (38,39)
        absneg2      = (36,37)
        absneg3      = (34,35)
        absneg4      = (32,33)

        widen1       = (36,39)
        widen2       = (26,29)

        mod_and      = (24,24)
        mod_seq      = (25,25)
        mod_sat      = (30,30)
        mod_rhadd    = (30,30)
        mod_restype  = (30,31)
        mod_cmp      = (32,34)

        D1           = (40,45)
        DM           = (46,47)

        op2          = (16,19)

        sr1_0        = (40,45)
        sr1_1        = (40,45)
        sr1_2        = (40,45)
        sr1_3        = (40,45)
        sr2_0        = (16,21)
        sr2_1        = (16,21)
        sr2_2        = (16,21)
        sr2_3        = (16,21)

        clamp        = (32,33)

        ofs          = (8,23) signed
        constant     = (8,39)
        sr_count     = (33,35)
        load_lane    = (36,38)
        unsigned_skip = (39,39)
        op           = (48,56)
        imm_mode     = (57,58)
        action       = (59,61)
        do_action    = (62,62)
;

define register offset=0x00 size=4 [
        r0
        r1
        r2
        r3
        r4
        r5
        r6
        r7
        r8
        r9
        r10
        r11
        r12
        r13
        r14
        r15
        r16
        r17
        r18
        r19
        r20
        r21
        r22
        r23
        r24
        r25
        r26
        r27
        r28
        r29
        r30
        r31
        r32
        r33
        r34
        r35
        r36
        r37
        r38
        r39
        r40
        r41
        r42
        r43
        r44
        r45
        r46
        r47
        r48
        r49
        r50
        r51
        r52
        r53
        r54
        r55
        r56
        r57
        r58
        r59
        r60
        r61
        r62
        r63
];

define register offset=0x100 size=4 [
        u0
        u1
        u2
        u3
        u4
        u5
        u6
        u7
        u8
        u9
        u10
        u11
        u12
        u13
        u14
        u15
        u16
        u17
        u18
        u19
        u20
        u21
        u22
        u23
        u24
        u25
        u26
        u27
        u28
        u29
        u30
        u31
        u32
        u33
        u34
        u35
        u36
        u37
        u38
        u39
        u40
        u41
        u42
        u43
        u44
        u45
        u46
        u47
        u48
        u49
        u50
        u51
        u52
        u53
        u54
        u55
        u56
        u57
        u58
        u59
        u60
        u61
        u62
        u63
];

# TODO: Use program_counter
define register offset=0x200 size=8 [
        PC SP
];

define register offset=0x300 size=4 [
        tls_ptr tls_ptr_hi wls_ptr wls_ptr_hi
        lane_id core_id program_counter
];

attach variables [ src1r src2r src3r src4r D1 sr1_0 sr2_0 ] [
        r0
        r1
        r2
        r3
        r4
        r5
        r6
        r7
        r8
        r9
        r10
        r11
        r12
        r13
        r14
        r15
        r16
        r17
        r18
        r19
        r20
        r21
        r22
        r23
        r24
        r25
        r26
        r27
        r28
        r29
        r30
        r31
        r32
        r33
        r34
        r35
        r36
        r37
        r38
        r39
        r40
        r41
        r42
        r43
        r44
        r45
        r46
        r47
        r48
        r49
        r50
        r51
        r52
        r53
        r54
        r55
        r56
        r57
        r58
        r59
        r60
        r61
        r62
        r63
];

attach variables [ sr1_1 sr2_1 ] [
        r1
        r2
        r3
        r4
        r5
        r6
        r7
        r8
        r9
        r10
        r11
        r12
        r13
        r14
        r15
        r16
        r17
        r18
        r19
        r20
        r21
        r22
        r23
        r24
        r25
        r26
        r27
        r28
        r29
        r30
        r31
        r32
        r33
        r34
        r35
        r36
        r37
        r38
        r39
        r40
        r41
        r42
        r43
        r44
        r45
        r46
        r47
        r48
        r49
        r50
        r51
        r52
        r53
        r54
        r55
        r56
        r57
        r58
        r59
        r60
        r61
        r62
        r63
        _
];
attach variables [ sr1_2 sr2_2 ] [
        r2
        r3
        r4
        r5
        r6
        r7
        r8
        r9
        r10
        r11
        r12
        r13
        r14
        r15
        r16
        r17
        r18
        r19
        r20
        r21
        r22
        r23
        r24
        r25
        r26
        r27
        r28
        r29
        r30
        r31
        r32
        r33
        r34
        r35
        r36
        r37
        r38
        r39
        r40
        r41
        r42
        r43
        r44
        r45
        r46
        r47
        r48
        r49
        r50
        r51
        r52
        r53
        r54
        r55
        r56
        r57
        r58
        r59
        r60
        r61
        r62
        r63
        _
        _
];
attach variables [ sr1_3 sr2_3 ] [
        r3
        r4
        r5
        r6
        r7
        r8
        r9
        r10
        r11
        r12
        r13
        r14
        r15
        r16
        r17
        r18
        r19
        r20
        r21
        r22
        r23
        r24
        r25
        r26
        r27
        r28
        r29
        r30
        r31
        r32
        r33
        r34
        r35
        r36
        r37
        r38
        r39
        r40
        r41
        r42
        r43
        r44
        r45
        r46
        r47
        r48
        r49
        r50
        r51
        r52
        r53
        r54
        r55
        r56
        r57
        r58
        r59
        r60
        r61
        r62
        r63
        _
        _
        _
];

attach variables [ src1u src2u src3u src4u ] [
        u0
        u1
        u2
        u3
        u4
        u5
        u6
        u7
        u8
        u9
        u10
        u11
        u12
        u13
        u14
        u15
        u16
        u17
        u18
        u19
        u20
        u21
        u22
        u23
        u24
        u25
        u26
        u27
        u28
        u29
        u30
        u31
        u32
        u33
        u34
        u35
        u36
        u37
        u38
        u39
        u40
        u41
        u42
        u43
        u44
        u45
        u46
        u47
        u48
        u49
        u50
        u51
        u52
        u53
        u54
        u55
        u56
        u57
        u58
        u59
        u60
        u61
        u62
        u63
];

attach values [ src1i src2i src3i src4i ] [
        0x0 0xffffffff 0x7fffffff 0xfafcfdfe 0x1000000 0x80002000
        0x70605030 0xc0b0a090 0x3020100 0x7060504 0xb0a0908 0xf0e0d0c
        0x13121110 0x17161514 0x1b1a1918 0x1f1e1d1c 0x3f800000
        0x3dcccccd 0x3ea2f983 0x3f317218 0x40490fdb 0x0 0x477fff00
        0x5c005bf8 0x2e660000 0x34000000 0x38000000 0x3c000000
        0x40000000 0x44000000 0x48000000 0x42480000
];

attach variables [ src1ts src2ts src3ts src4ts ] [
        _ _ tls_ptr tls_ptr_hi _ _ wls_ptr wls_ptr_hi
];

attach variables [ src1id src2id src3id src4id ] [
        _ _ lane_id _ _ _ core_id _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
        _ _ _ _ _ program_counter _
];

DEST: D1^".mask0" is D1 & DM=0 { export D1; }
DEST: D1^".h0" is D1 & DM=1 { export D1; }
DEST: D1^".h1" is D1 & DM=2 { export D1; }
DEST: D1 is D1 & DM=3 { export D1; }


S1: src1r is src1r & src1t=0 { export src1r; }
S1: "`"^src1r is src1r & src1t=1 { export src1r; }
S1: src1u is src1u & src1t=2 { export src1u; }
S1: src1i is src1i & src1t=3 & imm_mode=0 { export src1i; }
S1: src1ts is src1ts & src1t=3 & imm_mode=1 { export src1ts; }
S1: src1id is src1id & src1t=3 & imm_mode=3 { export src1id; }


# TODO: 64-bit swizzles
SW1_32: S1 is S1 & widen1=0 { local temp:4; temp = S1; export temp; }
SW1_32: S1^".h0" is S1 & widen1=2 { local temp:4; temp = zext(S1[0,16]); export temp; }
SW1_32: S1^".h1" is S1 & widen1=3 { local temp:4; temp = zext(S1[16,16]); export temp; }
SW1_32: S1^".b0" is S1 & widen1=4 { local temp:4; temp = zext(S1[0,8]); export temp; }
SW1_32: S1^".b1" is S1 & widen1=5 { local temp:4; temp = zext(S1[8,8]); export temp; }
SW1_32: S1^".b2" is S1 & widen1=6 { local temp:4; temp = zext(S1[16,8]); export temp; }
SW1_32: S1^".b3" is S1 & widen1=7 { local temp:4; temp = zext(S1[24,8]); export temp; }

SW1_16: S1^".h00" is S1 & widen1=0 { local temp:4; temp[0,16] = S1[0,16]; temp[16,16] = S1[0,16]; export temp; }
SW1_16: S1^".h10" is S1 & widen1=1 { local temp:4; temp[0,16] = S1[16,16]; temp[16,16] = S1[0,16]; export temp; }
SW1_16: S1 is S1 & widen1=2 { local temp:4; temp[0,16] = S1[0,16]; temp[16,16] = S1[16,16]; export temp; }
SW1_16: S1^".h11" is S1 & widen1=3 { local temp:4; temp[0,16] = S1[16,16]; temp[16,16] = S1[16,16]; export temp; }
SW1_16: S1^".b00" is S1 & widen1=4 { local temp:4; temp[0,16] = zext(S1[0,8]); temp[16,16] = zext(S1[0,8]); export temp; }
SW1_16: S1^".b20" is S1 & widen1=5 { local temp:4; temp[0,16] = zext(S1[16,8]); temp[16,16] = zext(S1[0,8]); export temp; }
SW1_16: S1^".b02" is S1 & widen1=6 { local temp:4; temp[0,16] = zext(S1[0,8]); temp[16,16] = zext(S1[16,8]); export temp; }
SW1_16: S1^".b22" is S1 & widen1=7 { local temp:4; temp[0,16] = zext(S1[16,8]); temp[16,16] = zext(S1[16,8]); export temp; }
SW1_16: S1^".b11" is S1 & widen1=8 { local temp:4; temp[0,16] = zext(S1[8,8]); temp[16,16] = zext(S1[8,8]); export temp; }
SW1_16: S1^".b31" is S1 & widen1=9 { local temp:4; temp[0,16] = zext(S1[24,8]); temp[16,16] = zext(S1[8,8]); export temp; }
SW1_16: S1^".b13" is S1 & widen1=10 { local temp:4; temp[0,16] = zext(S1[8,8]); temp[16,16] = zext(S1[24,8]); export temp; }
SW1_16: S1^".b33" is S1 & widen1=11 { local temp:4; temp[0,16] = zext(S1[24,8]); temp[16,16] = zext(S1[24,8]); export temp; }
SW1_16: S1^".b01" is S1 & widen1=12 { local temp:4; temp[0,16] = zext(S1[0,8]); temp[16,16] = zext(S1[8,8]); export temp; }
SW1_16: S1^".b23" is S1 & widen1=13 { local temp:4; temp[0,16] = zext(S1[16,8]); temp[16,16] = zext(S1[24,8]); export temp; }


S2: src2r is src2r & src2t=0 { export src2r; }
S2: "`"^src2r is src2r & src2t=1 { export src2r; }
S2: src2u is src2u & src2t=2 { export src2u; }
S2: src2i is src2i & src2t=3 & imm_mode=0 { export src2i; }
S2: src2ts is src2ts & src2t=3 & imm_mode=1 { export src2ts; }
S2: src2id is src2id & src2t=3 & imm_mode=3 { export src2id; }


# TODO: 64-bit swizzles
SW2_32: S2 is S2 & widen2=0 { local temp:4; temp = S2; export temp; }
SW2_32: S2^".h0" is S2 & widen2=2 { local temp:4; temp = zext(S2[0,16]); export temp; }
SW2_32: S2^".h1" is S2 & widen2=3 { local temp:4; temp = zext(S2[16,16]); export temp; }
SW2_32: S2^".b0" is S2 & widen2=4 { local temp:4; temp = zext(S2[0,8]); export temp; }
SW2_32: S2^".b1" is S2 & widen2=5 { local temp:4; temp = zext(S2[8,8]); export temp; }
SW2_32: S2^".b2" is S2 & widen2=6 { local temp:4; temp = zext(S2[16,8]); export temp; }
SW2_32: S2^".b3" is S2 & widen2=7 { local temp:4; temp = zext(S2[24,8]); export temp; }

SW2_16: S2^".h00" is S2 & widen2=0 { local temp:4; temp[0,16] = S2[0,16]; temp[16,16] = S2[0,16]; export temp; }
SW2_16: S2^".h10" is S2 & widen2=1 { local temp:4; temp[0,16] = S2[16,16]; temp[16,16] = S2[0,16]; export temp; }
SW2_16: S2 is S2 & widen2=2 { local temp:4; temp[0,16] = S2[0,16]; temp[16,16] = S2[16,16]; export temp; }
SW2_16: S2^".h11" is S2 & widen2=3 { local temp:4; temp[0,16] = S2[16,16]; temp[16,16] = S2[16,16]; export temp; }
SW2_16: S2^".b00" is S2 & widen2=4 { local temp:4; temp[0,16] = zext(S2[0,8]); temp[16,16] = zext(S2[0,8]); export temp; }
SW2_16: S2^".b20" is S2 & widen2=5 { local temp:4; temp[0,16] = zext(S2[16,8]); temp[16,16] = zext(S2[0,8]); export temp; }
SW2_16: S2^".b02" is S2 & widen2=6 { local temp:4; temp[0,16] = zext(S2[0,8]); temp[16,16] = zext(S2[16,8]); export temp; }
SW2_16: S2^".b22" is S2 & widen2=7 { local temp:4; temp[0,16] = zext(S2[16,8]); temp[16,16] = zext(S2[16,8]); export temp; }
SW2_16: S2^".b11" is S2 & widen2=8 { local temp:4; temp[0,16] = zext(S2[8,8]); temp[16,16] = zext(S2[8,8]); export temp; }
SW2_16: S2^".b31" is S2 & widen2=9 { local temp:4; temp[0,16] = zext(S2[24,8]); temp[16,16] = zext(S2[8,8]); export temp; }
SW2_16: S2^".b13" is S2 & widen2=10 { local temp:4; temp[0,16] = zext(S2[8,8]); temp[16,16] = zext(S2[24,8]); export temp; }
SW2_16: S2^".b33" is S2 & widen2=11 { local temp:4; temp[0,16] = zext(S2[24,8]); temp[16,16] = zext(S2[24,8]); export temp; }
SW2_16: S2^".b01" is S2 & widen2=12 { local temp:4; temp[0,16] = zext(S2[0,8]); temp[16,16] = zext(S2[8,8]); export temp; }
SW2_16: S2^".b23" is S2 & widen2=13 { local temp:4; temp[0,16] = zext(S2[16,8]); temp[16,16] = zext(S2[24,8]); export temp; }


S3: src3r is src3r & src3t=0 { export src3r; }
S3: "`"^src3r is src3r & src3t=1 { export src3r; }
S3: src3u is src3u & src3t=2 { export src3u; }
S3: src3i is src3i & src3t=3 & imm_mode=0 { export src3i; }
S3: src3ts is src3ts & src3t=3 & imm_mode=1 { export src3ts; }
S3: src3id is src3id & src3t=3 & imm_mode=3 { export src3id; }


S4: src4r is src4r & src4t=0 { export src4r; }
S4: "`"^src4r is src4r & src4t=1 { export src4r; }
S4: src4u is src4u & src4t=2 { export src4u; }
S4: src4i is src4i & src4t=3 & imm_mode=0 { export src4i; }
S4: src4ts is src4ts & src4t=3 & imm_mode=1 { export src4ts; }
S4: src4id is src4id & src4t=3 & imm_mode=3 { export src4id; }


#AN$: S$ is S$ & absneg$=0 { export S$; }
#AN$: S$^".neg" is S$ & absneg$=1 { t:4 = 0:4 f- S$; export t; }
#AN$: S$^".abs" is S$ & absneg$=2 { t:4 = abs(S$); export t; }
#AN$: S$^".neg.abs" is S$ & absneg$=3 { t:4 = 0:4 f- abs(S$); export t; }

AN1: S1 is S1 & absneg1=0 { export S1; }
AN1: S1^".neg" is S1 & absneg1=1 { t:4 = 0:4 f- S1; export t; }
AN1: S1^".abs" is S1 & absneg1=2 { t:4 = abs(S1); export t; }
AN1: S1^".neg.abs" is S1 & absneg1=3 { t:4 = 0:4 f- abs(S1); export t; }

AN2: S2 is S2 & absneg2=0 { export S2; }
AN2: S2^".neg" is S2 & absneg2=1 { t:4 = 0:4 f- S2; export t; }
AN2: S2^".abs" is S2 & absneg2=2 { t:4 = abs(S2); export t; }
AN2: S2^".neg.abs" is S2 & absneg2=3 { t:4 = 0:4 f- abs(S2); export t; }

# TODO: Fix these
AN1.h: S1 is S1 & absneg1=0 { export S1; }
AN1.h: S1^".neg" is S1 & absneg1=1 { t:4 = 0:4 f- S1; export t; }
AN1.h: S1^".abs" is S1 & absneg1=2 { t:4 = abs(S1); export t; }
AN1.h: S1^".neg.abs" is S1 & absneg1=3 { t:4 = 0:4 f- abs(S1); export t; }

AN2.h: S2 is S2 & absneg2=0 { export S2; }
AN2.h: S2^".neg" is S2 & absneg2=1 { t:4 = 0:4 f- S2; export t; }
AN2.h: S2^".abs" is S2 & absneg2=2 { t:4 = abs(S2); export t; }
AN2.h: S2^".neg.abs" is S2 & absneg2=3 { t:4 = 0:4 f- abs(S2); export t; }

# Comparison bits: LT=1 EQ=2 GT=4 NE=8
CMP: ".eq" is mod_cmp=0 { export 2:1; }
CMP: ".gt" is mod_cmp=1 { export 4:1; }
CMP: ".ge" is mod_cmp=2 { export 6:1; }
CMP: ".ne" is mod_cmp=3 { export 8:1; }
CMP: ".lt" is mod_cmp=4 { export 1:1; }
CMP: ".le" is mod_cmp=5 { export 3:1; }
CMP: ".gtlt" is mod_cmp=6 { export 5:1; }
# TODO: What does total even do?
CMP: ".total" is mod_cmp=7 unimpl

RESTYPE: ".i1" is mod_restype=0 { export 1:4; }
RESTYPE: ".f1" is mod_restype=1 { export 0x3f800000:4; }
RESTYPE: ".m1" is mod_restype=2 { export 0xffffffff:4; }
RESTYPE: ".u1" is mod_restype=3 { export 0:4; }

SAT: "" is mod_sat=0 { export 0:1; }
SAT: ".saturate" is mod_sat=1 { export 1:1; }

RHADD: "" is mod_rhadd=0 { export 0:1; }
RHADD: ".rhadd" is mod_rhadd=1 { export 1:1; }

macro Store(reg, mask, val) {
      maskv = (mask & 1) * 0xffff + (mask & 2) * 0x7fff8000;
      reg = (val & maskv) | (reg & ~maskv);
}

macro StoreClamp(reg, mask, clamp, val) {
      # if bit 1 is set, clamp to -1
      clamp_m1 = zext(val f> 0xbf800000:4) * val + zext(val f<= 0xbf800000) * 0xbf800000:4;
      val = zext((clamp & 1:1) != 0:1) * clamp_m1 + zext((clamp & 1:1) == 0:1) * val;

      # if bit 2 is set, clamp to 0
      clamp_0 = zext(val f> 0:4) * val + zext(val f<= 0) * 0:4;
      val = zext((clamp & 2:1) != 0:1) * clamp_0 + zext((clamp & 2:1) == 0:1) * val;

      # if bit 3 is set, clamp to 1
      clamp_1 = zext(val f> 0x3f800000:4) * 0x3f800000:4 + zext(val f<= 0x3f800000:4) * val;
      val = zext((clamp & 4:1) != 0:1) * clamp_1 + zext((clamp & 4:1) == 0:1) * val;

      Store(reg, mask, val);
}

DC: "" is clamp=0 { export 0:1; }
DC: ".clamp_0_inf" is clamp=1 { export 2:1; }
DC: ".clamp_m1_1" is clamp=2 { export 5:1; }
DC: ".clamp_0_1" is clamp=3 { export 6:1; }

define pcodeop clz;
define pcodeop saturate;

:MOV.i32 DEST, S1 is op=0x91 & op2=0x0 & DEST & DM & S1 {
        Store(DEST, DM, S1);
}
:CLZ.i32 DEST, S1 is op=0x91 & op2=0x4 & DEST & DM & S1 {
        Store(DEST, DM, clz(S1));
}
:IABS.s32 DEST, S1 is op=0x91 & op2=0x8 & DEST & DM & S1 {
        Store(DEST, DM, zext(S1 s> 0) * S1 + zext(S1 s<= 0) * -S1);
}
:NOT.i32 DEST, S1 is op=0x91 & op2=0xE & DEST & DM & S1 {
        Store(DEST, DM, ~S1);
}

:NOP is op=0x00 { }

# TODO: Calculate saturation: check if 64-bit computation == 32-bit computation?
# TODO: CLPER, also shaddx?



:IADD.u32 DEST, SW1_32, SW2_32 is op=0xA0 & op2=0 & DEST & DM & SW1_32 & SW2_32 & mod_sat=0 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, a + b);
}

:IADD.s32 DEST, SW1_32, SW2_32 is op=0xA8 & op2=0 & DEST & DM & SW1_32 & SW2_32 & mod_sat=0 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, a + b);
}

:IADD.s32 DEST, SW1_32, SW2_32 is op=0x1A0 & op2=0 & DEST & DM & SW1_32 & SW2_32 & mod_sat=0 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, a + b);
}

:IADD.v2u16 DEST, SW1_16, SW2_16 is op=0xA1 & op2=0 & DEST & DM & SW1_16 & SW2_16 & mod_sat=0 {
        local temp:4; local a; local b;
        a = SW1_16[0,16]; b = SW2_16[0,16]; temp[0,16] = a + b;
        a = SW1_16[16,16]; b = SW2_16[16,16]; temp[16,16] = a + b;
        Store(DEST, DM, temp);
}



:IADD.u32^".saturate" DEST, SW1_32, SW2_32 is op=0xA0 & op2=0 & DEST & DM & SW1_32 & SW2_32 & mod_sat=1 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, saturate(a + b));
}

:IADD.s32^".saturate" DEST, SW1_32, SW2_32 is op=0xA8 & op2=0 & DEST & DM & SW1_32 & SW2_32 & mod_sat=1 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, saturate(a + b));
}

:IADD.s32^".saturate" DEST, SW1_32, SW2_32 is op=0x1A0 & op2=0 & DEST & DM & SW1_32 & SW2_32 & mod_sat=1 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, saturate(a + b));
}

:IADD.v2u16^".saturate" DEST, SW1_16, SW2_16 is op=0xA1 & op2=0 & DEST & DM & SW1_16 & SW2_16 & mod_sat=1 {
        local temp:4; local a; local b;
        a = SW1_16[0,16]; b = SW2_16[0,16]; temp[0,16] = saturate(a + b);
        a = SW1_16[16,16]; b = SW2_16[16,16]; temp[16,16] = saturate(a + b);
        Store(DEST, DM, temp);
}



:ISUB.u32 DEST, SW1_32, SW2_32 is op=0xA0 & op2=1 & DEST & DM & SW1_32 & SW2_32 & mod_sat=0 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, a - b);
}

:ISUB.s32 DEST, SW1_32, SW2_32 is op=0xA8 & op2=1 & DEST & DM & SW1_32 & SW2_32 & mod_sat=0 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, a - b);
}

:ISUB.s32 DEST, SW1_32, SW2_32 is op=0x1A0 & op2=1 & DEST & DM & SW1_32 & SW2_32 & mod_sat=0 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, a - b);
}

:ISUB.v2u16 DEST, SW1_16, SW2_16 is op=0xA1 & op2=1 & DEST & DM & SW1_16 & SW2_16 & mod_sat=0 {
        local temp:4; local a; local b;
        a = SW1_16[0,16]; b = SW2_16[0,16]; temp[0,16] = a - b;
        a = SW1_16[16,16]; b = SW2_16[16,16]; temp[16,16] = a - b;
        Store(DEST, DM, temp);
}



:ISUB.u32^".saturate" DEST, SW1_32, SW2_32 is op=0xA0 & op2=1 & DEST & DM & SW1_32 & SW2_32 & mod_sat=1 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, saturate(a - b));
}

:ISUB.s32^".saturate" DEST, SW1_32, SW2_32 is op=0xA8 & op2=1 & DEST & DM & SW1_32 & SW2_32 & mod_sat=1 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, saturate(a - b));
}

:ISUB.s32^".saturate" DEST, SW1_32, SW2_32 is op=0x1A0 & op2=1 & DEST & DM & SW1_32 & SW2_32 & mod_sat=1 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, saturate(a - b));
}

:ISUB.v2u16^".saturate" DEST, SW1_16, SW2_16 is op=0xA1 & op2=1 & DEST & DM & SW1_16 & SW2_16 & mod_sat=1 {
        local temp:4; local a; local b;
        a = SW1_16[0,16]; b = SW2_16[0,16]; temp[0,16] = saturate(a - b);
        a = SW1_16[16,16]; b = SW2_16[16,16]; temp[16,16] = saturate(a - b);
        Store(DEST, DM, temp);
}



:IMUL.u32 DEST, SW1_32, SW2_32 is op=0xA0 & op2=10 & DEST & DM & SW1_32 & SW2_32 & mod_sat=0 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, a * b);
}

:IMUL.s32 DEST, SW1_32, SW2_32 is op=0xA8 & op2=10 & DEST & DM & SW1_32 & SW2_32 & mod_sat=0 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, a * b);
}

:IMUL.s32 DEST, SW1_32, SW2_32 is op=0x1A0 & op2=10 & DEST & DM & SW1_32 & SW2_32 & mod_sat=0 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, a * b);
}

:IMUL.v2u16 DEST, SW1_16, SW2_16 is op=0xA1 & op2=10 & DEST & DM & SW1_16 & SW2_16 & mod_sat=0 {
        local temp:4; local a; local b;
        a = SW1_16[0,16]; b = SW2_16[0,16]; temp[0,16] = a * b;
        a = SW1_16[16,16]; b = SW2_16[16,16]; temp[16,16] = a * b;
        Store(DEST, DM, temp);
}



:IMUL.u32^".saturate" DEST, SW1_32, SW2_32 is op=0xA0 & op2=10 & DEST & DM & SW1_32 & SW2_32 & mod_sat=1 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, saturate(a * b));
}

:IMUL.s32^".saturate" DEST, SW1_32, SW2_32 is op=0xA8 & op2=10 & DEST & DM & SW1_32 & SW2_32 & mod_sat=1 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, saturate(a * b));
}

:IMUL.s32^".saturate" DEST, SW1_32, SW2_32 is op=0x1A0 & op2=10 & DEST & DM & SW1_32 & SW2_32 & mod_sat=1 {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, saturate(a * b));
}

:IMUL.v2u16^".saturate" DEST, SW1_16, SW2_16 is op=0xA1 & op2=10 & DEST & DM & SW1_16 & SW2_16 & mod_sat=1 {
        local temp:4; local a; local b;
        a = SW1_16[0,16]; b = SW2_16[0,16]; temp[0,16] = saturate(a * b);
        a = SW1_16[16,16]; b = SW2_16[16,16]; temp[16,16] = saturate(a * b);
        Store(DEST, DM, temp);
}



:HADD.u32^RHADD DEST, SW1_32, SW2_32 is op=0xA0 & op2=11 & DEST & DM & SW1_32 & SW2_32 & RHADD {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, zext(RHADD == 0) * ((a & b) + ((a ^ b) >> 1)) + zext(RHADD == 1) * ((a | b) - (a ^ b) >> 1));
}

:HADD.s32^RHADD DEST, SW1_32, SW2_32 is op=0xA8 & op2=11 & DEST & DM & SW1_32 & SW2_32 & RHADD {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, zext(RHADD == 0) * ((a & b) + ((a ^ b) s>> 1)) + zext(RHADD == 1) * ((a | b) - (a ^ b) s>> 1));
}

:HADD.s32^RHADD DEST, SW1_32, SW2_32 is op=0x1A0 & op2=11 & DEST & DM & SW1_32 & SW2_32 & RHADD {
        local a = SW1_32; local b = SW2_32;
        Store(DEST, DM, zext(RHADD == 0) * ((a & b) + ((a ^ b) s>> 1)) + zext(RHADD == 1) * ((a | b) - (a ^ b) s>> 1));
}

:HADD.v2u16^RHADD DEST, SW1_16, SW2_16 is op=0xA1 & op2=11 & DEST & DM & SW1_16 & SW2_16 & RHADD {
        local temp:4; local a; local b;
        a = SW1_16[0,16]; b = SW2_16[0,16]; temp[0,16] = zext(RHADD == 0) * ((a & b) + ((a ^ b) >> 1)) + zext(RHADD == 1) * ((a | b) - (a ^ b) >> 1);
        a = SW1_16[16,16]; b = SW2_16[16,16]; temp[16,16] = zext(RHADD == 0) * ((a & b) + ((a ^ b) >> 1)) + zext(RHADD == 1) * ((a | b) - (a ^ b) >> 1);
        Store(DEST, DM, temp);
}


:FADD.f32 DEST^DC, AN1, AN2 is op=0xA4 & DEST & DC & DM & AN1 & AN2 {
        StoreClamp(DEST, DM, DC, AN1 f+ AN2);
}
:FADD.v2f16 DEST^DC, AN1.h, AN2.h is op=0xA5 & DEST & DC & DM & AN1.h & AN2.h {
        res:4 = 0;
        res[0,16] = AN1.h[0,16] f+ AN2.h[0,16];
        res[16,16] = AN1.h[16,16] f+ AN2.h[16,16];
        StoreClamp(DEST, DM, DC, res);
}

# TODO and, seq modifiers
:ICMP.u32^CMP^RESTYPE DEST, SW1_32, SW2_32, S3 is op=0xf0 & CMP & RESTYPE & DEST & SW1_32 & SW2_32 & S3 {
}




SR1_1: @sr1_0 is sr1_0 { export sr1_0; }
SR2_1: @sr2_0 is sr2_0 { export sr2_0; }

SR1_2: @sr1_0:sr1_1 is sr1_0 & sr1_1 { export sr1_0; }
SR2_2: @sr2_0:sr2_1 is sr2_0 & sr2_1 { export sr2_0; }

SR1_3: @sr1_0:sr1_1:sr1_2 is sr1_0 & sr1_1 & sr1_2 { export sr1_0; }
SR2_3: @sr2_0:sr2_1:sr2_2 is sr2_0 & sr2_1 & sr2_2 { export sr2_0; }

SR1_4: @sr1_0:sr1_1:sr1_2:sr1_3 is sr1_0 & sr1_1 & sr1_2 & sr1_3 { export sr1_0; }
SR2_4: @sr2_0:sr2_1:sr2_2:sr2_3 is sr2_0 & sr2_1 & sr2_2 & sr2_3 { export sr2_0; }


:TEX @sr1_0, SR2_4, SW1_32
is op=0x128 & sr1_0 & SR2_4 & SW1_32 & sr_count=1 unimpl


:TEX @sr1_0:sr1_1, SR2_4, SW1_32
is op=0x128 & sr1_0 & sr1_1 & SR2_4 & SW1_32 & sr_count=2 unimpl


:TEX @sr1_0:sr1_1:sr1_2, SR2_4, SW1_32
is op=0x128 & sr1_0 & sr1_1 & sr1_2 & SR2_4 & SW1_32 & sr_count=3 unimpl


:TEX @sr1_0:sr1_1:sr1_2:sr1_3, SR2_4, SW1_32
is op=0x128 & sr1_0 & sr1_1 & sr1_2 & sr1_3 & SR2_4 & SW1_32 & sr_count=4 unimpl



